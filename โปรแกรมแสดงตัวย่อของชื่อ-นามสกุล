ชื่อPollapoj ตัวPนำหน้าโดยในตารางasciiบอกเลขฐาน16ทำให้addressที่20คือ50 ส่วนนามสกุลYoodhanawarapong ตัวYนำหน้าโดยในตารางasciiบอกเลขฐาน16addressที่21คือ59

ใช้โปรแกรม https://guilaume-savaton-eseo.github.io/emulsIV/ นำเลข50และ59ใส่ในช่องaddressที่20และ21ส่วนในช่อง22และ23ให้ใส่00ทั้งคู่



หลักการทำงาน และฟังก์ชัน

ฟังก์ชัน

addi: add imidiateคือการบวก โดยนำเลข32 +x0โดยx0จะเป็น 0เสมอและนำผผลลัพธ์มาใส่ที่x1

lui: load upper imidiateคือการนำด้านขวาสุด1wordหรือ32bit(0xc0000000)มาใสานx2แต่ใส่แค่20bitแรก

lbu: load bite unsigned คือการนำเลขหน่วยความจำที่x1(0x1)มาใส่ในx3

beq: branch on equal คือการเช็คว่าเท่ากันหรือไม่ ถ้าเท่ากันจะกระโดดไปที่branch กรณีรี้ถ้าx3=0จะบวกไป16(ไปที่word24)

sb: store bite คือเก็บในหน่วยความจเป็นการนำข้อมูลที่x3ไปเก็บที่address x2

addi: add imidiate คือนำ1ไปบวกx1แล้วเก็บที่x1(x1ค่าใหม่จะเพิ่มขึ้นเรื่อยๆ)

jal: jump and linkคือกระโดดถอยหลังไป16(ไปที่word8)

jal: jump and link กระโดดกลับไปที่0



การทำงาน

คำสั่งแรกจะได้0มาจากpcวางที่busแล้วดึงเลข4bite มาจากword0วางไว้ที่data จากนั้นแปลที่instructonแล้วเอาไปบวกที่ALUด้วย0ได้20+0=20แล้วเก็บที่x1

คำสั่งที่2ถูกเรียกมา4biteแล้วเรียงใหม่ที่dataนำไปแปลที่instruction(lui)นำเลขที่ได้ไปใส่ALUจากนั้นบันทึกที่x2

คำสั่งที่3ถูกเรียกมาbiteแล้วนำไปแปลที่instruction(lbu)นำ0+20แล้วไปที่หน่วยความจำaddress20แล้วเอามา1bite นำไปเก็บที่x3

คำสั่งที่4ถูกเรียกมา4biteแฃ้วนำไปแปลที่instruction(beq)ว่าเท่ากันหรือไม่ ซึ่งเท่ากับ0โดยเปรียบเทียบที่comparator

คำสั่งที่5ถูกเรียกมา4biteแล้วนำไปแปลที่instruction(sb)นำx2มาบวกกับ0แล้วไปที่หน่วยความจำ0ไปที่หน่วยความจำจะได้ตัวอักษรตัวแรก จบloopแรก

ทำวนซ้ำจนครบ เมืื่อครบจะวนที่1c

